% Determining the source term expression corresponding to the
% unsaturated Biot equations test #2

syms x     % first cartesian component
syms y     % second cartesian component
syms t     % time 

%% The displacement solution
u = [t*x*(1-x)*y*(1-y), -t*x*(1-x)*y*(1-y)];
p = -t*x*(1-x)*y*(1-y)-1;

%% Constants 

% Elasticity
mu_s = 1;           % [Pa] First Lamé parameter
lambda_s = 1;       % [Pa] Second Lamé parameter

% Rock
phi  = 0.4;            % [-] Porosity
K = 1;               % [m^2] Permeability
C_s = 1;             % [1/Pa] Solid compressibility

% Fluid
rho_f = 1;           % [kg/m^3] Density
g = 1;               % [m/s^2] Gravity acceleration
mu_f = 1;              % [Pa s] Viscosity
C_f = 1;                    % [1/Pa] Fluid compressibility
    

% Medium
alpha = 1;                  % [-] Biot's coefficient

% vanGenuchten
alpha_v = 0.04;             % [1/m] van Genuchten parameter
a = alpha_v/(rho_f*g);      % [ms^2/kg] similar to alpha, but more convinient
n = 2;                      % [-] van Genuchten parameter
m = 1-(1/n);                % [-] van Genuchten parameter
S_r = 0.25;                 % [-] Residual saturation

%% Consitutive relationships
S = ( (1-S_r) / (1+(a*abs(p))^n)^m ) + S_r;

krw = (1 - (a*abs(p) )^(n-1) * (1 + (a*abs(p))^n)^(-m) )^2 / ...
      (1 + (a*abs(p))^n)^(m/2);

C = (-m * n * (1-S_r) * p * (a * abs(p))^n) / ...
    (abs(p)^2 * (1 + (a * abs(p))^n)^(m+1));

%% Constant terms
chi_p = (alpha-phi) * C_s * S^2  +  phi * C_f * S;
chi_S = ((alpha-phi) * C_s * S * p  +  phi) * C;

%% Useful data
gradient_u = [diff(u(1),x),diff(u(1),y)
              diff(u(2),x),diff(u(2),y)];

divergence_u = diff(u(1),x) + diff(u(2),y); 

sw_times_p = S * p;

gradient_p = [diff(p,x),diff(p,y)];

gradient_y = [diff(rho_f*g*y,x),diff(rho_f*g*y,y)];

gradient_sw_times_p = [diff(sw_times_p,x),diff(sw_times_p,y)];

%% Mechanical terms

% The strain tensor          
epsilon = 0.5 * (gradient_u + transpose(gradient_u));

% The effective stress
sigma_eff = 2*mu_s*epsilon +lambda_s*divergence_u*eye(2);

% Divergence of the effective stress
div_sigma_eff = [diff(sigma_eff(1,1),x) + diff(sigma_eff(2,1),y),...
                 diff(sigma_eff(1,2),x) + diff(sigma_eff(2,2),y)];

% The momentum equation
momentum_eq = div_sigma_eff - alpha*gradient_sw_times_p;          

%% Flow terms

% Darcy's law
qw = - (K/mu_f) * krw * (gradient_p + gradient_y);

% Divergence of Darcy's velocity
div_qw = diff(qw(1),x) + diff(qw(2),y);

% Time derivative divergence of u
time_deriv_div_u = diff(divergence_u,t);

% Time derivative of pressure
partial_p_partial_t = diff(p,t);

% Time derivative of the saturation
partial_s_partial_t = diff(S,t);

% Mass conservation equation
mass_eq =   chi_p * partial_p_partial_t   ...
          + chi_S * partial_p_partial_t ...
          + alpha * S * time_deriv_div_u ...
          + div_qw;

%% The source terms
F = transpose(momentum_eq);
f = mass_eq;

%%
G= cartGrid([20,20],[1,1]);
G = computeGeometry(G);
x_cntr = G.cells.centroids(:,1);
y_cntr = G.cells.centroids(:,2);


f_fun = matlabFunction(f);
F_fun = matlabFunction(F);

f_source = f_fun(1,x_cntr,y_cntr);
F_source = F_fun(1,x_cntr,y_cntr);

S_fun = matlabFunction(S);

Sw_ = @(z) ( (1-S_r) / (1+(a*abs(z))^n)^m ) + S_r;
krw_ = @(z) (1 - (a*abs(z) )^(n-1) * (1 + (a*abs(z))^n)^(-m) )^2 / ...
      (1 + (a*abs(z))^n)^(m/2);
C_ =  @(z) (-m * n * (1-S_r) * z * (a * abs(z))^n) / ...
    (abs(z)^2 * (1 + (a * abs(z))^n)^(m+1));
